from sklearn import tree
from sklearn import tree
import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import numpy as np
import seaborn as sns
from sklearn.utils.class_weight import compute_class_weight
import sys
import threading
if sys.version_info.major < 3:
import __builtin__ as builtins
else:
import builtins
from sklearn import tree
import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import numpy as np
import seaborn as sns
from sklearn.utils.class_weight import compute_class_weight
#scripts: takes input the model training script workspace, and the list of combos that are labled and the list of
#combos that we need to make predition, and a list of models to use for making prediction
#writers: Jonah Ford, Basira Daqiq
rm(list=ls())
# libraries
library(tidyverse)
library(mlr)
library(readxl)
library(openxlsx)
library(reshape2)
library(ggplot2)
library(pheatmap)
# rename function
var_rename <- function(Data){
Data <- Data %>%
# replace condition
rename_at(vars(matches("Butyrate")),funs(str_replace(., "Butyrate", "b"))) %>%
rename_at(vars(matches("Valerate")),funs(str_replace(., "Valerate", "v"))) %>%
rename_at(vars(matches("acidic")),funs(str_replace(., "acidic", "a"))) %>%
rename_at(vars(contains("low")),funs(str_replace(., "lowcholesterol", "c"))) %>%
rename_at(vars(matches("cholesterol")),funs(str_replace(., "cholesterol", "h"))) %>%
rename_at(vars(matches("intracellular")),funs(str_replace(., "intracellular", "i"))) %>%
rename_at(vars(matches("standard")),funs(str_replace(., "standard", "s"))) %>%
rename_at(vars(matches("dormancy")),funs(str_replace(., "dormancy", "d"))) %>%
# replace time points
rename_at(vars(matches("Constant")),funs(str_replace(., "Constant", "C"))) %>%
rename_at(vars(matches("ConstantTerminal")),funs(str_replace(., "ConstantTerminal", "CT"))) %>%
rename_at(vars(matches("Terminal")),funs(str_replace(., "Terminal", "T")))
return(Data)
}
# prediction function
pred_fun <- function(cond_name, model_list,Xproj_list,ThreshVPerf_list,orig_pred_list,data_4_pred){
# get condition subset name only - remove the "CondSub_" portion
#print(c("this is cond_name: ", cond_name))
cond_sub <- cond_name %>% str_remove("CondSub_")
cond_sub <- paste0("CondSub_",i)
# select subset data
Xproj <- Xproj_list[[cond_name]] # original data
mod<-model_list[[cond_name]] # model
TvP<-ThreshVPerf_list[[cond_name]] # threshold vs performance
# training drugs and threshold performance data
train_drug <- Xproj %>% filter(Dataset == "Train") %>% pull(Drug)
ThreshVPerf <-df_ThreshVPerf_list[[cond_sub]]$data # performance v threshold data
do_pred <- predict( object = mod, newdata = data_4_pred %>% as.data.frame)
pred_drugs <- data_4_pred %>% select(Drug, NumbDrugs) # the three way drugs you are testing on   ########
# for Youden's J
# # get averaged performance data from the resampling/crossvalidation and calculate youden's J
train_perf_data <-TvP$data %>% # get resampling data
mutate(Y_J = tpr+tnr-1) #  calculate youden's J for each threshold value
# get optimal threshold from Youden's J
all_Y_J_max <- train_perf_data%>%
slice_max(Y_J) %>% pull(threshold) # select the threshold where Youden's J is maximum
# optimum threshold
opt_thresh <-all_Y_J_max[all_Y_J_max!=0] %>% min # in the case of ties in the Max Youden's J, exclude 0 threshold and select the minimum (least restrictive)
#Add the Drug Column, dataset (train/test), score add Youden's J threshold,
drug_dataset_score <- pred_drugs %>% mutate(Dataset = case_when(Drug %in% train_drug~"Train",TRUE~"Test")) %>%
left_join(Xproj %>% select(Drug,Score),by = "Drug")
extract_pred_data = do_pred$data %>%
add_column(YJ=opt_thresh)
extract_pred_data<- extract_pred_data %>% setNames(paste0(cond_sub, "_",names(.))) # append the condition subset name to the variable names
extract_pred_data <- bind_cols(drug_dataset_score,extract_pred_data)
#output
return(extract_pred_data)
}
# load workspace from the randomForest learnerscript " MLclassif_CondSub_PerfEst_MC_70_30_10x_v2"
filename_ws <- "ABDHSV_RMM_BPaL_95_combos_phase2_RandProp70_30_Seed1229_training_Seed1229_testing_TPcomplete_AllCondSub_Variables_MLtrainANDtestANDtasks_workspace_randomForestSRC_learner_workspace"
load(paste0(filename_ws,".Rdata"))
install.packages(c("abind", "aplot", "askpass", "backports", "bit", "bitops", "boot", "brio", "broom", "bslib", "cachem", "callr", "caTools", "checkmate", "cli", "cluster", "codetools", "colorspace", "commonmark", "corrplot", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "data.tree", "DBI", "dbplyr", "DiagrammeR", "digest", "dplyr", "e1071", "evaluate", "expm", "fansi", "farver", "fastmap", "fontawesome", "foreign", "fs", "ggfun", "ggiraph", "ggnewscale", "ggpattern", "ggplot2", "ggrepel", "ggsci", "glue", "gridpattern", "gtable", "highr", "htmltools", "httr", "igraph", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lubridate", "MatrixModels", "mgcv", "minqa", "MLmetrics", "munsell", "nlme", "nloptr", "openssl", "openxlsx", "patchwork", "pbkrtest", "phangorn", "phytools", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "promises", "ps", "psych", "quantreg", "ragg", "randomForestSRC", "Rcpp", "RcppEigen", "readr", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "shiny", "showtext", "snakecase", "SparseM", "spatial", "stringi", "stringr", "survival", "sysfonts", "systemfonts", "testthat", "textshaping", "thematic", "tidyr", "tidyselect", "tidytext", "timechange", "tinytex", "tweenr", "units", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "XML", "xml2", "yaml", "yulab.utils", "zip"))
rsconnect::deployApp("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
?openxlsx
??openxlsx
install.packages(openxlsx)
install.packages("openxlsx")
?read.csv
setwd("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
rm(list=ls())
source("volcano.R")
source("combo_trends.R")
# import data
class_colors <- read.csv("class_colors_18Sep2024.csv")
drugs <- read.csv("drug_classes_18Sep2024.csv") %>%
mutate(fullName = paste0(name, " (", abbreviation, ")"))
library(readxl) # for reading
library(tidyverse)
library(openxlsx) # for writing
library(parallel)
library(ggsignif)
library(ggpattern)
library(colorspace)
library(ggrepel)
library(shiny)
library(openxlsx)
library(vroom)
library(shinyFeedback)
library(shinylive)
setwd
# load in packages
library(tidyverse)
library(openxlsx) # for writing
library(parallel)
library(ggsignif)
library(ggpattern)
library(colorspace)
library(ggrepel)
library(shiny)
library(openxlsx)
library(vroom)
library(shinyFeedback)
library(shinylive)
setwd("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
rm(list=ls())
source("volcano.R")
source("combo_trends.R")
# import data
class_colors <- read.csv("class_colors_18Sep2024.csv")
setwd("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
rm(list=ls())
source("volcano.R")
source("combo_trends.R")
setwd("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
rm(list=ls())
source("volcano.R")
source("combo_trends.R")
rsconnect::deployApp("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
source("volcano.R")
source("combo_trends.R")
rsconnect::deployApp("/Users/hderas01/Documents/GitHub/volcanoPlot/volcanoPlot_v01")
